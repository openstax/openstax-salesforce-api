require 'simplecov'
SimpleCov.start
require 'codecov'
SimpleCov.formatter = SimpleCov::Formatter::Codecov

# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end
end

def set_cookie
  { 'HTTP_COOKIE' => 'oxa=eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0..QdX5SwjkpcP0cOaa.SNf1yadprqqloyxKOocEsWaZ3VjWNSUPnHMShKH-ulyr4d5Zj2ReupUBfzRgz-5pwEWZ5iN_LcO-Vc9-NSRBp_QPHpiIMls60nOYTokK5qostdjmUbQGyjV5F3MIfMmZwfbPgY5XJT5T-3MDQ3b4nF8ulBbufsphwsNsl6UFkEp5PjN1FTJ6P9fXkkvQNgmiUuP8QITdbkN6RNvbx3MkNS36Ly44c_HLIEqEZ5QF8M2buovgh_xvNuo56EEywpnKkJfKHQ23eg2ycVtvpeyUhsUpMSyur_L9olcGFyzJIYp6Q_xunXnZDz6hMvt5baOFwaLNyfv20IbqMKeQ-srz9dL9AgY--LwrhW3yvyTZefKApOUigqZ6V4pgicKSqDRpl3LEUYm_yHTSFeUFJoXlXDYa-WbMaK3BvK8qLWQhEo3UtGVlDDtZzva3rCVbSTmc2aav_3c0CsanygiKgctvbC3y3mgUTqQSOj0j06iHsAwi1rQcurqX5uZUN2g-FLHMNU3RQrH7NlxGSX8PrDYhS49q8ER5DvQdoSjIckVSrmaYGLmQxAI4ZRRf0uzULXJLwti4Cz6odbEqKMU5hvg8i8LqoX4reKYHmzNCePQO1W6wltaII7_67kARnS_OQ8_dQQeTkSQiqRxbKyic4M33XMmpkSRdyPQLPlffwtDl4qus5RSgc1RpJHRAJF81GB5nGgP98zr9j8gUIkAPpLoxLR85RLehDUxByVJAmF35p4r6CZ1ABRH3vXH0UBrpLL0OltNJc66E7amzHLhj3JvebF4yIjCVdF4P8qe5f8wopVONjnCmHwRboqs2AknBYpdVGMb0SbyYugthx3NgfCblrjMGtLN00z_N4UUP_ktW16dzrV_PMxrsBpeI1J2PwLG_HxxmT8J8fZocwmS0PQShxqcwjmMwHAyq60VBkbXdBSvTMkTnrv1MiFIb2ad-ASKtURL5ZwxeGl06u8sUW3QowEkLYJdMnggoc4dWi9ak36TOpDsSL34nLErCTFk96xStUNDxmRUWHQ14VNDdhvMcc3ryVYoV5wpiK3Xpwu6-5-H_4AhuWmOiHDTW6e5I7iohdA5TvRZ5VZPSiqSH30AHIXLfk3VPU7wG30MiVW-eYaQFH9wYGT3hJLpBUwoOAkj_ZRrxSTLQsE8b09SZAwkuArPj4XcWHtEDOekhqzy1z9v8aIN5ysrIHJvQubKjguKYi_rky4OrL-vEkiF6K4ayaCcQQaD0B09ajinUbFZDiIbqc8kM0FAVs98_Okb8xcgA_IGaibM02dxgy-sMoQ.QtbCTF_nrjVm_SQpHsB02w'}
end

def create_contact(salesforce_id: '003U000001i3mWpIAI')
  Contact.where(salesforce_id: salesforce_id).first ||
    FactoryBot.create(:api_contact, salesforce_id: salesforce_id)
end

def create_token_header
  application =  FactoryBot.create(:application)
  token = FactoryBot.create(:doorkeeper_access_token, application: application)
  { 'Authorization': 'Bearer ' + token.token }
end

def search_accounts_result
  {:total_count=>1, :items=>[{:id=>1, :name=>"Ed Woodward", :first_name=>"Ed", :last_name=>"Woodward", :full_name=>"Ed Woodward", :uuid=>"57bbe3d3-d630-4e9c-bc22-f86b701381a0", :support_identifier=>"cs_76415f3f", :is_test=>false, :opt_out_of_cookies=>false, :using_openstax=>false, :salesforce_contact_id=>"0030v00000UlMyeAAF", :faculty_status=>"no_faculty_info", :is_newflow=>true, :is_instructor_verification_stale=>false, :needs_complete_edu_profile=>true, :self_reported_role=>"student", :school_type=>"unknown_school_type", :school_location=>"unknown_school_location", :is_kip=>false, :is_administrator=>true, :grant_tutor_access=>false, :contact_infos=>[{:id=>1, :type=>"EmailAddress", :value=>"ecw1@rice.edu", :is_verified=>true, :is_guessed_preferred=>true}], :applications=>[]}]}.to_json
end
